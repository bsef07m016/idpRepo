// Generated by CoffeeScript 1.4.0
(function() {

  define(["generic_chart"], function(generic_chart) {
    var BarChart;
    BarChart = (function() {

      function BarChart(options) {
        this.chart = generic_chart.init(options);
      }

      BarChart.prototype.drawBars = function(data) {
        var barOffset, barWidth, isOrdinal, scaleOptions,
          _this = this;
        scaleOptions = this.chart.options.scale;
        isOrdinal = scaleOptions && scaleOptions.x && scaleOptions.x.type === "ordinal";
        if (isOrdinal) {
          barWidth = this.chart.xScale.rangeBand();
          barOffset = 0;
        } else {
          barWidth = this.chart.xScale(this.minInterval("x")) - this.chart.xScale(0);
          barWidth *= 0.9;
          barOffset = barWidth / 2;
        }
        return this.chart.svg.selectAll(".bar").data(data).enter().append("rect").attr("class", "bar").attr("x", function(d) {
          return _this.chart.xScale(d.x) - barOffset;
        }).attr("y", function(d) {
          return _this.chart.yScale(d.y);
        }).attr("width", barWidth).attr("height", function(d) {
          return _this.chart.options.height - _this.chart.yScale(d.y);
        }).attr("fill", function(d) {
          return "#0000aa";
        });
      };

      BarChart.prototype.minInterval = function(key) {
        var currentValue, distance, i, lastValue, result;
        result = null;
        lastValue = this.chart.data[0][key];
        i = 1;
        while (i < this.chart.data.length) {
          currentValue = this.chart.data[i][key];
          distance = currentValue - lastValue;
          if (!result || result > distance) {
            result = distance;
          }
          lastValue = currentValue;
          i += 1;
        }
        return result;
      };

      BarChart.prototype.draw = function() {
        this.chart.drawSvg();
        this.chart.drawAxes();
        return this.drawBars(this.chart.data[0]);
      };

      BarChart.prototype.redraw = function() {
        this.chart.svg = null;
        return this.draw();
      };

      return BarChart;

    })();
    return {
      init: function(options) {
        return new BarChart(options);
      }
    };
  });

}).call(this);
